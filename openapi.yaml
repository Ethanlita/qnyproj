# openapi.yaml (Auto-generated from openapi.template.yaml)
# DO NOT EDIT THIS FILE DIRECTLY - Edit openapi.template.yaml instead
# This file is used by frontend code generation tools
# Generated at: 2025-10-24T09:07:46.769Z
openapi: 3.0.1
info:
  title: Novel-to-Comics API
  description: AI-powered novel to comic generation platform
  version: v1.0
paths:
  /items:
    get:
      summary: Get a list of items for the authenticated user
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
  /edge-probe:
    get:
      summary: Edge probe endpoint - returns request headers (public endpoint)
      description: |
        Public endpoint that returns information about the received HTTP request,
        including headers and request context. Useful for debugging CDN and edge routing.
        This endpoint does not require authentication.
      tags:
        - Edge Diagnostics
      security: []
      responses:
        "200":
          description: Request header information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EdgeProbeResult"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to process request
  /novels:
    get:
      operationId: listNovels
      summary: 获取用户的作品列表
      tags:
        - Novels
      security:
        - CognitoAuthorizer: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: 每页返回的作品数量
        - name: lastKey
          in: query
          schema:
            type: string
          description: 分页游标（上一页返回的 lastKey）
      responses:
        "200":
          description: 作品列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Novel"
                  lastKey:
                    type: string
                    description: 分页游标，用于获取下一页
    post:
      operationId: createNovel
      summary: 创建新作品
      tags:
        - Novels
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: 作品标题
                  example: 我的奇幻冒险
                text:
                  type: string
                  description: 小说文本内容 (可选,也可以后续上传到S3)
                  example: 从前有一个勇士...
                metadata:
                  type: object
                  properties:
                    genre:
                      type: string
                      example: 奇幻
                    tags:
                      type: array
                      items:
                        type: string
                      example:
                        - 冒险
                        - 魔法
      responses:
        "201":
          description: 作品创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Novel"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /novels/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-123
    get:
      summary: 获取作品详情
      tags:
        - Novels
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 作品详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Novel"
        "404":
          description: 作品不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: 删除作品
      tags:
        - Novels
      security:
        - CognitoAuthorizer: []
      responses:
        "204":
          description: 删除成功
        "404":
          description: 作品不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /novels/{id}/analyze:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-123
    post:
      summary: 分析小说文本生成分镜
      description: 使用 Qwen AI 分析文本，提取角色圣经和分镜大纲
      tags:
        - Novels
      security:
        - CognitoAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  type: object
                  properties:
                    panelsPerPage:
                      type: integer
                      default: 6
                      description: 每页面板数
                    style:
                      type: string
                      default: manga
                      description: 漫画风格
      responses:
        "202":
          description: 分析任务已启动
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum:
                      - pending
                  message:
                    type: string
                    example: Analysis started. Use GET /jobs/{jobId} to check progress.
        "404":
          description: 作品不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /novels/{id}/bible:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 获取作品圣经
      description: 返回指定作品最新版本的角色圣经和场景圣经
      tags:
        - Bible
      security:
        - CognitoAuthorizer: []
      parameters:
        - name: version
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: 指定版本号，不提供时返回最新版本
      responses:
        "200":
          description: 当前圣经信息
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bible"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: 未找到对应圣经
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /novels/{id}/bible/history:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: 获取圣经版本历史
      description: 返回指定作品的圣经版本列表
      tags:
        - Bible
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 圣经版本列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BibleHistoryEntry"
  /characters/{charId}:
    parameters:
      - name: charId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-char-123
    get:
      summary: 获取角色详情 (含所有配置)
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 角色详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
        "404":
          description: 角色不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: 更新角色基础信息
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum:
                    - protagonist
                    - antagonist
                    - supporting
                    - background
                baseInfo:
                  type: object
                  properties:
                    gender:
                      type: string
                      enum:
                        - male
                        - female
                        - other
                    age:
                      type: integer
                    personality:
                      type: array
                      items:
                        type: string
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Character"
  /characters/{charId}/configurations:
    parameters:
      - name: charId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-char-123
    get:
      summary: 列举角色的所有配置
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 配置列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CharacterConfiguration"
    post:
      summary: 创建新配置
      description: 为角色创建新的配置 (如"战斗模式"、"日常装扮")
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: 战斗模式
                description:
                  type: string
                  minLength: 1
                  maxLength: 2000
                  example: 艾莉娅穿着银白色铠甲，手持魔法剑
                tags:
                  type: array
                  items:
                    type: string
                  example:
                    - 战斗
                    - 铠甲
                appearance:
                  type: object
                  description: 该配置的外貌描述
                isDefault:
                  type: boolean
                  default: false
      responses:
        "201":
          description: 配置创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharacterConfiguration"
  /characters/{charId}/configurations/{configId}:
    parameters:
      - name: charId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-char-123
      - name: configId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-config-123
    get:
      summary: 获取配置详情
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 配置详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharacterConfiguration"
    put:
      summary: 更新配置
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                appearance:
                  type: object
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CharacterConfiguration"
    delete:
      summary: 删除配置
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      responses:
        "204":
          description: 删除成功
  /characters/{charId}/configurations/{configId}/refs:
    parameters:
      - name: charId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-char-123
      - name: configId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-config-123
    post:
      summary: 上传配置的参考图
      description: 为指定配置上传多张参考图
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: 参考图文件 (最多10张)
      responses:
        "200":
          description: 上传成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploaded:
                    type: array
                    items:
                      type: object
                      properties:
                        s3Key:
                          type: string
                        url:
                          type: string
                          format: uri
                        caption:
                          type: string
  /characters/{charId}/configurations/{configId}/portraits:
    parameters:
      - name: charId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-char-123
      - name: configId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-config-123
    post:
      summary: 生成配置的标准像
      description: 为指定配置生成多视角标准像 (使用 Imagen 3)
      tags:
        - Characters
      security:
        - CognitoAuthorizer: []
      responses:
        "202":
          description: 生成任务已启动
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    format: uuid
                  message:
                    type: string
  /storyboards/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-123
    get:
      summary: 获取分镜详情
      tags:
        - Storyboards
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 分镜详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storyboard"
  /storyboards/{id}/generate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-123
    post:
      summary: 批量生成面板图像
      description: 使用 Imagen 3 批量生成所有面板的图像
      tags:
        - Storyboards
      security:
        - CognitoAuthorizer: []
      parameters:
        - name: mode
          in: query
          required: false
          schema:
            type: string
            enum:
              - preview
              - hd
            default: preview
          description: "生成模式 (preview: 512x288, hd: 1920x1080)"
      responses:
        "202":
          description: 生成任务已启动
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    format: uuid
                  status:
                    type: string
                  totalPanels:
                    type: integer
                  message:
                    type: string
  /panels/{panelId}:
    parameters:
      - name: panelId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-panel-123
    get:
      summary: 获取面板详情
      tags:
        - Panels
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 面板详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Panel"
  /panels/{panelId}/edit:
    parameters:
      - name: panelId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-panel-123
    post:
      summary: 编辑面板
      description: 使用 Imagen 3 编辑 API (inpaint/outpaint/bg_swap)
      tags:
        - Panels
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - editMode
                - instruction
              properties:
                editMode:
                  type: string
                  enum:
                    - inpaint
                    - outpaint
                    - bg_swap
                instruction:
                  type: string
                  description: 编辑指令
                  example: 把角色的表情改为微笑
                mask:
                  type: string
                  description: 遮罩图 (Base64 或 S3 URL)
      responses:
        "202":
          description: 编辑任务已启动
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    format: uuid
  /change-requests:
    post:
      summary: 提交修改请求
      description: 用户用自然语言描述修改诉求，系统解析为 CR-DSL 并执行
      tags:
        - Change Requests
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - novelId
                - naturalLanguage
              properties:
                novelId:
                  type: string
                  format: uuid
                naturalLanguage:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  example: 把第 3 页第 2 个面板中艾莉娅的表情改为微笑
      responses:
        "202":
          description: CR 已提交并正在处理
          content:
            application/json:
              schema:
                type: object
                properties:
                  crId:
                    type: string
                    format: uuid
                  jobId:
                    type: string
                    format: uuid
                  dsl:
                    $ref: "#/components/schemas/CRDSL"
                  message:
                    type: string
  /jobs:
    get:
      operationId: listJobs
      summary: 获取用户的任务列表
      description: 返回当前用户的任务集合，支持分页、类型与状态筛选。
      tags:
        - Jobs
      security:
        - CognitoAuthorizer: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 50
          description: 每页返回的任务数量
        - name: lastKey
          in: query
          schema:
            type: string
          description: 分页游标（上一页返回的 lastKey）
        - name: type
          in: query
          schema:
            type: string
            enum:
              - analyze
              - generate_preview
              - generate_hd
              - change_request
              - panel_edit
              - export_pdf
              - export_webtoon
              - export_resources
              - generate_portrait
          description: 任务类型过滤
        - name: status
          in: query
          schema:
            type: string
            enum:
              - pending
              - in_progress
              - completed
              - failed
          description: 任务状态过滤
      responses:
        "200":
          description: 任务列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
                  lastKey:
                    type: string
                    description: 下一页查询所需的游标
  /jobs/{id}:
    get:
      operationId: getJob
      summary: 查询任务进度
      tags:
        - Jobs
      security:
        - CognitoAuthorizer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: test-123
      responses:
        "200":
          description: 任务详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
  /exports:
    post:
      summary: 创建导出任务
      description: 导出漫画为 PDF/Webtoon/资源包
      tags:
        - Exports
      security:
        - CognitoAuthorizer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - novelId
                - format
              properties:
                novelId:
                  type: string
                  format: uuid
                format:
                  type: string
                  enum:
                    - pdf
                    - webtoon
                    - resources
                  description: 导出格式
      responses:
        "202":
          description: 导出任务已启动
          content:
            application/json:
              schema:
                type: object
                properties:
                  exportId:
                    type: string
                    format: uuid
                  jobId:
                    type: string
                    format: uuid
  /exports/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: test-123
    get:
      summary: 获取导出结果
      description: 返回导出文件的预签名 URL
      tags:
        - Exports
      security:
        - CognitoAuthorizer: []
      responses:
        "200":
          description: 导出详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Export"
components:
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: 错误消息
          example: Resource not found
        details:
          type: object
          description: 详细错误信息
          additionalProperties: true
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: My Awesome Item
    EdgeProbeResult:
      type: object
      required:
        - receivedHost
        - requestContextDomain
        - method
        - path
      properties:
        receivedHost:
          type: string
          description: Host header received by the server
          example: api.vfs-tracker.app
        requestContextDomain:
          type: string
          description: Domain from request context
          example: api.vfs-tracker.app
        method:
          type: string
          description: HTTP method
          example: GET
        path:
          type: string
          description: Request path
          example: /dev/edge-probe
        headers:
          type: object
          description: All received HTTP headers
          additionalProperties:
            type: string
          example:
            user-agent: Mozilla/5.0
            accept: application/json
        timestamp:
          type: string
          format: date-time
          description: Request timestamp
          example: 2025-10-16T08:30:00.000Z
    Novel:
      type: object
      required:
        - id
        - title
        - status
        - userId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: 作品唯一标识
        title:
          type: string
          description: 作品标题
          example: 我的奇幻冒险
        originalText:
          type: string
          description: 原文内容
        originalTextS3:
          type: string
          description: 原文 S3 Key
        status:
          type: string
          enum:
            - created
            - analyzing
            - analyzed
            - generating
            - completed
            - error
          description: 作品状态
        storyboardId:
          type: string
          format: uuid
          description: 关联的分镜ID
        userId:
          type: string
          description: Cognito 用户 ID
        metadata:
          type: object
          properties:
            genre:
              type: string
            tags:
              type: array
              items:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Character:
      type: object
      required:
        - id
        - name
        - novelId
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: 角色名称
          example: 艾莉娅
        role:
          type: string
          enum:
            - protagonist
            - antagonist
            - supporting
            - background
        novelId:
          type: string
          format: uuid
        baseInfo:
          type: object
          properties:
            gender:
              type: string
              enum:
                - male
                - female
                - other
            age:
              type: integer
            personality:
              type: array
              items:
                type: string
        configurations:
          type: array
          items:
            $ref: "#/components/schemas/CharacterConfiguration"
          description: 角色的所有配置
        portraits:
          type: array
          items:
            type: object
            properties:
              view:
                type: string
              s3Key:
                type: string
              generatedAt:
                type: string
                format: date-time
        defaultConfigId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CharacterConfiguration:
      type: object
      required:
        - id
        - charId
        - name
      properties:
        id:
          type: string
          format: uuid
        charId:
          type: string
          format: uuid
        novelId:
          type: string
          format: uuid
        name:
          type: string
          description: 配置名称
          example: 战斗模式
        description:
          type: string
          description: 配置的详细描述
          example: 艾莉娅穿着银白色铠甲，手持魔法剑
        tags:
          type: array
          items:
            type: string
          example:
            - 战斗
            - 铠甲
        appearance:
          type: object
          description: 外貌描述
          properties:
            hairStyle:
              type: string
            hairColor:
              type: string
            eyeColor:
              type: string
            clothing:
              type: array
              items:
                type: string
            accessories:
              type: array
              items:
                type: string
        referenceImages:
          type: array
          items:
            type: object
            properties:
              s3Key:
                type: string
              url:
                type: string
                format: uri
              caption:
                type: string
              uploadedAt:
                type: string
                format: date-time
        generatedPortraits:
          type: array
          items:
            type: object
            properties:
              view:
                type: string
                enum:
                  - front
                  - side
                  - three-quarter
                  - 45-degree
                  - full-body
              url:
                type: string
                format: uri
              s3Key:
                type: string
              generatedAt:
                type: string
                format: date-time
        isDefault:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Storyboard:
      type: object
      required:
        - id
        - novelId
        - version
      properties:
        id:
          type: string
          format: uuid
        novelId:
          type: string
          format: uuid
        version:
          type: integer
          minimum: 1
        totalPages:
          type: integer
        panelCount:
          type: integer
        panels:
          type: array
          items:
            $ref: "#/components/schemas/Panel"
        createdAt:
          type: string
          format: date-time
    Panel:
      type: object
      required:
        - id
        - page
        - index
      properties:
        id:
          type: string
          format: uuid
        storyboardId:
          type: string
          format: uuid
        page:
          type: integer
          minimum: 1
          description: 页码
        index:
          type: integer
          minimum: 0
          description: 页内序号
        content:
          type: object
          properties:
            scene:
              type: string
              description: 场景描述
            shotType:
              type: string
              enum:
                - close-up
                - medium
                - wide
                - extreme-wide
            characters:
              type: array
              items:
                type: object
                properties:
                  charId:
                    type: string
                    format: uuid
                  configId:
                    type: string
                    format: uuid
                    description: 使用的配置ID
                  name:
                    type: string
                  pose:
                    type: string
                  expression:
                    type: string
                    enum:
                      - neutral
                      - happy
                      - sad
                      - angry
                      - surprised
                      - determined
                      - fearful
            dialogue:
              type: array
              items:
                type: object
                properties:
                  speaker:
                    type: string
                  text:
                    type: string
                  bubbleType:
                    type: string
                    enum:
                      - speech
                      - thought
                      - narration
                      - scream
        visualPrompt:
          type: string
          description: Imagen prompt
        images:
          type: object
          properties:
            preview:
              type: string
              format: uri
            hd:
              type: string
              format: uri
        imagesS3:
          type: object
          description: 面板图像在 S3 中的对象键
          additionalProperties:
            type: string
    Job:
      type: object
      required:
        - id
        - type
        - status
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - analyze
            - generate_preview
            - generate_hd
            - change_request
            - panel_edit
            - export_pdf
            - export_webtoon
            - export_resources
            - generate_portrait
        mode:
          type: string
          description: 适用于生成任务的模式 (preview 或 hd)
        status:
          type: string
          enum:
            - pending
            - in_progress
            - completed
            - failed
        progress:
          type: object
          properties:
            total:
              type: integer
            completed:
              type: integer
            failed:
              type: integer
            percentage:
              type: number
              format: float
        result:
          type: object
          description: 任务结果 (内容依赖于 type)
          additionalProperties: true
        error:
          type: string
          description: 错误信息
        tasks:
          type: object
          description: 面板任务统计
          properties:
            total:
              type: integer
            completed:
              type: integer
            failed:
              type: integer
            inProgress:
              type: integer
            pending:
              type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CRDSL:
      type: object
      required:
        - scope
        - type
        - ops
      description: Change Request Domain-Specific Language
      properties:
        scope:
          type: string
          enum:
            - global
            - character
            - panel
            - page
        targetId:
          type: string
        type:
          type: string
          enum:
            - art
            - dialogue
            - layout
            - style
        ops:
          type: array
          items:
            type: object
            required:
              - action
            properties:
              action:
                type: string
                enum:
                  - inpaint
                  - outpaint
                  - bg_swap
                  - repose
                  - regen_panel
                  - rewrite_dialogue
                  - reorder
              params:
                type: object
                additionalProperties: true
    Export:
      type: object
      required:
        - id
        - novelId
        - format
        - status
      properties:
        id:
          type: string
          format: uuid
        novelId:
          type: string
          format: uuid
        format:
          type: string
          enum:
            - pdf
            - webtoon
            - resources
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - failed
        fileUrl:
          type: string
          format: uri
          description: 预签名 URL
        fileSize:
          type: integer
        createdAt:
          type: string
          format: date-time
    Bible:
      type: object
      required:
        - novelId
        - version
        - characters
        - scenes
        - metadata
      properties:
        novelId:
          type: string
          description: 作品 ID
        version:
          type: integer
          minimum: 1
          description: 圣经版本号
        characters:
          type: array
          description: 角色圣经
          items:
            $ref: "#/components/schemas/BibleCharacter"
        scenes:
          type: array
          description: 场景圣经
          items:
            $ref: "#/components/schemas/BibleScene"
        metadata:
          $ref: "#/components/schemas/BibleMetadata"
    BibleCharacter:
      type: object
      required:
        - name
        - role
      properties:
        name:
          type: string
          description: 角色名称
        role:
          type: string
          enum:
            - protagonist
            - antagonist
            - supporting
            - background
        appearance:
          $ref: "#/components/schemas/BibleCharacterAppearance"
        personality:
          type: array
          items:
            type: string
        firstAppearance:
          $ref: "#/components/schemas/BibleFirstAppearance"
        referenceImages:
          type: array
          items:
            type: string
            format: uri
    BibleCharacterAppearance:
      type: object
      properties:
        gender:
          type: string
        age:
          type: integer
          minimum: 0
        hairColor:
          type: string
        hairStyle:
          type: string
        eyeColor:
          type: string
        height:
          type: string
        build:
          type: string
        clothing:
          type: array
          items:
            type: string
        distinctiveFeatures:
          type: array
          items:
            type: string
    BibleFirstAppearance:
      type: object
      required:
        - chapter
      properties:
        chapter:
          type: integer
          minimum: 1
        page:
          type: integer
          minimum: 1
        panelIndex:
          type: integer
          minimum: 0
    BibleScene:
      type: object
      required:
        - id
        - name
        - type
        - description
      properties:
        id:
          type: string
          description: 场景 ID
        name:
          type: string
        type:
          type: string
          enum:
            - indoor
            - outdoor
            - indoor-outdoor
            - natural
            - urban
            - rural
            - fantasy
            - abstract
        description:
          type: string
        visualCharacteristics:
          type: object
          properties:
            architecture:
              type: string
            keyLandmarks:
              type: array
              items:
                type: string
            colorScheme:
              type: string
            lighting:
              type: object
              properties:
                naturalLight:
                  type: string
                artificialLight:
                  type: string
                lightSources:
                  type: array
                  items:
                    type: string
            atmosphere:
              type: string
            soundscape:
              type: array
              items:
                type: string
            textures:
              type: array
              items:
                type: string
        spatialLayout:
          type: object
          properties:
            size:
              type: string
            layout:
              type: string
            keyAreas:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  position:
                    type: string
        timeVariations:
          type: array
          items:
            type: object
            properties:
              timeOfDay:
                type: string
              description:
                type: string
        weatherVariations:
          type: array
          items:
            type: object
            properties:
              weather:
                type: string
              description:
                type: string
        narrativeRole:
          type: string
        firstAppearance:
          $ref: "#/components/schemas/BibleFirstAppearance"
        referenceImages:
          type: array
          items:
            type: string
            format: uri
    BibleMetadata:
      type: object
      required:
        - createdAt
        - updatedAt
        - lastChapter
        - totalCharacters
        - totalScenes
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastChapter:
          type: integer
          minimum: 0
        totalCharacters:
          type: integer
          minimum: 0
        totalScenes:
          type: integer
          minimum: 0
        storageLocation:
          type: string
          description: 如果圣经存储在 S3 中，则为 S3 URI
    BibleHistoryEntry:
      type: object
      required:
        - version
        - updatedAt
      properties:
        version:
          type: integer
          minimum: 1
        updatedAt:
          type: string
          format: date-time
        lastChapter:
          type: integer
          minimum: 0
        totalCharacters:
          type: integer
          minimum: 0
        totalScenes:
          type: integer
          minimum: 0
        storageLocation:
          type: string
  securitySchemes:
    CognitoAuthorizer:
      type: openIdConnect
      openIdConnectUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_EXAMPLE
