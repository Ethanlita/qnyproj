#!/usr/bin/env node
/**
 * 从 openapi.template.yaml 生成纯净的 openapi.yaml
 * 移除所有 AWS 特定的扩展字段，保留标准 OpenAPI 规范
 */

const fs = require('fs');
const path = require('path');
const yaml = require('yaml');

const templatePath = path.join(__dirname, '../openapi.template.yaml');
const outputPath = path.join(__dirname, '../openapi.yaml');

// 读取模板文件（作为纯文本，先替换 CloudFormation 标签）
let templateContent = fs.readFileSync(templatePath, 'utf8');

// 预处理：替换 CloudFormation 内部函数标签
templateContent = templateContent
  .replace(/!Sub\s+/g, '') // 移除 !Sub 标签
  .replace(/!Ref\s+/g, '') // 移除 !Ref 标签
  .replace(/!GetAtt\s+/g, ''); // 移除 !GetAtt 标签

// 现在解析 YAML
const openApiDoc = yaml.parse(templateContent);

// 递归移除所有 AWS 扩展字段
function removeAwsExtensions(obj) {
  if (!obj || typeof obj !== 'object') return obj;

  // 如果是数组，递归处理每个元素
  if (Array.isArray(obj)) {
    return obj.map(item => removeAwsExtensions(item));
  }

  // 处理对象
  const cleaned = {};
  for (const [key, value] of Object.entries(obj)) {
    // 跳过所有 x-amazon-* 扩展字段
    if (key.startsWith('x-amazon-')) {
      continue;
    }

    // 处理 CloudFormation 内部函数（如 Fn::Sub, !Sub）
    if (key === 'Fn::Sub' || key === 'Ref' || key.startsWith('Fn::')) {
      // 如果是字符串模板，提取模板字符串并替换为示例值
      if (typeof value === 'string') {
        // 将 ${AWS::Region} 替换为 us-east-1
        // 将 ${MyCognitoUserPoolId} 替换为示例值
        let cleanedValue = value
          .replace(/\$\{AWS::Region\}/g, 'us-east-1')
          .replace(/\$\{MyCognitoUserPoolId\}/g, 'us-east-1_EXAMPLE')
          .replace(/\$\{[^}]+\}/g, 'example-value');
        return cleanedValue;
      }
      continue;
    }

    // 递归清理嵌套对象
    cleaned[key] = removeAwsExtensions(value);
  }

  return cleaned;
}

// 清理文档
const cleanedDoc = removeAwsExtensions(openApiDoc);

// 确保 securitySchemes 中的 openIdConnectUrl 是有效的字符串
if (cleanedDoc.components?.securitySchemes?.CognitoAuthorizer?.openIdConnectUrl) {
  let url = cleanedDoc.components.securitySchemes.CognitoAuthorizer.openIdConnectUrl;
  if (typeof url === 'string') {
    // 替换剩余的 CloudFormation 变量
    url = url
      .replace(/\$\{AWS::Region\}/g, 'us-east-1')
      .replace(/\$\{MyCognitoUserPoolId\}/g, 'us-east-1_EXAMPLE')
      .replace(/\$\{[^}]+\}/g, 'example-value');
    cleanedDoc.components.securitySchemes.CognitoAuthorizer.openIdConnectUrl = url;
  } else if (typeof url === 'object') {
    // 如果还是对象（包含 Fn::Sub），设置为示例URL
    cleanedDoc.components.securitySchemes.CognitoAuthorizer.openIdConnectUrl =
      'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_EXAMPLE';
  }
}

// 添加说明注释
const headerComment = `# openapi.yaml (Auto-generated from openapi.template.yaml)
# DO NOT EDIT THIS FILE DIRECTLY - Edit openapi.template.yaml instead
# This file is used by frontend code generation tools
# Generated at: ${new Date().toISOString()}
`;

// 生成 YAML 并写入文件
const outputYaml = headerComment + yaml.stringify(cleanedDoc, {
  lineWidth: 0,
  defaultStringType: 'PLAIN'
});

fs.writeFileSync(outputPath, outputYaml, 'utf8');

console.log('✅ Generated openapi.yaml from openapi.template.yaml');
console.log(`   Input:  ${templatePath}`);
console.log(`   Output: ${outputPath}`);

