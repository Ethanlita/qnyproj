name: Deploy Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # 需要写权限来推送到 gh-pages 分支
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Job 1: Deploy Backend to AWS
  deploy-backend:
    name: Deploy Backend to AWS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate OpenAPI spec
        run: npm run generate:openapi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup AWS SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install backend dependencies
        run: |
          cd backend
          echo "📦 Installing backend dependencies..."
          npm install
          echo "✅ Backend dependencies installed"
          echo ""
          echo "📋 Installed packages:"
          npm list --depth=0 || true

      - name: Verify critical modules
        run: |
          cd backend
          echo "🔍 Verifying critical modules exist..."
          
          echo "✓ Checking lib/qwen-adapter.js..."
          test -f lib/qwen-adapter.js && echo "  ✅ Found" || echo "  ❌ Missing"
          
          echo "✓ Checking lib/schema-to-prompt.js..."
          test -f lib/schema-to-prompt.js && echo "  ✅ Found" || echo "  ❌ Missing"
          
          echo "✓ Checking schemas/storyboard.json..."
          test -f schemas/storyboard.json && echo "  ✅ Found" || echo "  ❌ Missing"
          
          echo ""
          echo "📂 lib/ directory contents:"
          ls -lh lib/

      - name: Sync secrets to AWS Secrets Manager
        run: |
          cd backend
          echo "🔐 Syncing secrets to AWS Secrets Manager..."
          
          # Create temporary .env from GitHub Secrets
          cat > .env << EOF
          QWEN_API_KEY=${{ secrets.QWEN_API_KEY }}
          DASHSCOPE_API_KEY=${{ secrets.QWEN_API_KEY }}
          QWEN_ENDPOINT=${{ secrets.QWEN_ENDPOINT || 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1' }}
          QWEN_MODEL=${{ secrets.QWEN_MODEL || 'qwen-plus' }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GEMINI_PROJECT_ID=${{ secrets.GEMINI_PROJECT_ID }}
          GEMINI_MODEL=${{ secrets.GEMINI_MODEL || 'imagen-4.0-fast-generate-001' }}
          GEMINI_LOCATION=${{ secrets.GEMINI_LOCATION || 'us-central1' }}
          COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          EOF
          
          echo "📝 .env file created with secrets"
          
          # Sync to Secrets Manager
          node scripts/sync-secrets.js --stack-name qnyproj-api
          
          echo "✅ Secrets synced successfully"
          
          # Clean up
          rm .env
          echo "🧹 Cleaned up temporary .env file"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Build SAM application
        run: |
          cd backend
          echo "🔨 Building SAM application with container..."
          echo "   This will ensure consistent builds across environments"
          echo ""
          
          sam build --use-container --cached
          
          echo ""
          echo "✅ SAM build completed"
          echo ""
          echo "📦 Build artifacts:"
          ls -lh .aws-sam/build/ | head -20

      - name: Verify build artifacts
        run: |
          cd backend
          echo "🔍 Verifying build artifacts for AnalyzeWorkerFunction..."
          echo ""
          
          BUILD_DIR=".aws-sam/build/AnalyzeWorkerFunction"
          
          echo "📂 Function directory structure:"
          ls -lh "$BUILD_DIR/" | head -10
          echo ""
          
          echo "📂 lib/ directory in build:"
          if [ -d "$BUILD_DIR/lib" ]; then
            ls -lh "$BUILD_DIR/lib/"
            echo ""
            
            # Verify critical files
            echo "🔍 Verifying critical files in build:"
            for file in "lib/qwen-adapter.js" "lib/schema-to-prompt.js" "schemas/storyboard.json"; do
              if [ -f "$BUILD_DIR/$file" ]; then
                SIZE=$(stat -f%z "$BUILD_DIR/$file" 2>/dev/null || stat -c%s "$BUILD_DIR/$file" 2>/dev/null)
                echo "  ✅ $file (${SIZE} bytes)"
              else
                echo "  ❌ MISSING: $file"
                exit 1
              fi
            done
          else
            echo "  ❌ ERROR: lib/ directory not found in build!"
            exit 1
          fi
          
          echo ""
          echo "✅ All critical files verified in build"

      - name: Deploy to AWS
        run: |
          cd backend
          echo "🚀 Deploying to AWS..."
          echo "   Stack: qnyproj-api"
          echo "   Region: ${{ secrets.AWS_REGION }}"
          echo ""
          
          # Create temporary .env with COGNITO_USER_POOL_ID for parameter passing
          cat > .env << EOF
          COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          EOF
          
          # Load and deploy with parameter
          source <(grep COGNITO_USER_POOL_ID .env)
          
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides "MyCognitoUserPoolId=$COGNITO_USER_POOL_ID"
          
          # Clean up
          rm .env
          
          echo ""
          echo "✅ Deployment completed successfully"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Verify deployment
        run: |
          cd backend
          echo "🔍 Verifying deployment..."
          echo ""
          
          # Get Lambda function name
          FUNCTION_NAME=$(aws cloudformation describe-stack-resources \
            --stack-name qnyproj-api \
            --query 'StackResources[?LogicalResourceId==`AnalyzeWorkerFunction`].PhysicalResourceId' \
            --output text)
          
          echo "📊 Lambda Function: $FUNCTION_NAME"
          
          # Check function configuration
          echo ""
          echo "🔧 Function Configuration:"
          aws lambda get-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --query '{Runtime:Runtime,Memory:MemorySize,Timeout:Timeout}' \
            --output table
          
          # Check environment variables
          echo ""
          echo "🔧 Environment Variables:"
          aws lambda get-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --query 'Environment.Variables' \
            --output json | jq -r 'to_entries | .[] | "  - \(.key): \(.value[:50])..."'
          
          echo ""
          echo "✅ Deployment verification completed"
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  # Job 2: Build and Deploy Frontend to GitHub Pages (Deploy from Branch)
  deploy-frontend:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Generate OpenAPI and API client
        run: npm run generate:frontend-api

      - name: Build frontend
        run: npm run build:frontend
        env:
          NODE_ENV: production
          # API 配置
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          # Cognito 配置 - 从 GitHub Secrets 注入
          VITE_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          VITE_AWS_REGION: ${{ secrets.AWS_REGION }}
          # 生产环境回调 URL（会自动使用 BASE_URL）
          # 实际回调地址: https://ethanlita.github.io/qnyproj/callback

      - name: Deploy to GitHub Pages (gh-pages branch)
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/dist
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy frontend to GitHub Pages'

  # Job 3: Test (runs on PRs)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Generate OpenAPI and API client
        run: npm run generate:frontend-api

      - name: TypeScript check
        run: |
          cd frontend
          pnpm exec tsc --noEmit

      - name: Lint check
        run: |
          cd frontend
          pnpm lint

      - name: Build test
        run: npm run build:frontend

      - name: Backend tests
        run: |
          cd backend/hello-world
          npm install
          npm test
