# backend/template.yaml
# AWS SAM template for Novel-to-Comics backend
# Generated from openapi.template.yaml and function definitions
# To regenerate: node scripts/generate-sam-template.js

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Novel-to-Comics backend - serverless API with Lambda functions
Parameters:
  MyCognitoUserPoolId:
    Type: String
    Description: The ID of the Cognito User Pool for authorization.
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
Resources:
  # DynamoDB Table for all application data
  ComicDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-data'
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: N
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
  BiblesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-bibles'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: novelId
          AttributeType: S
        - AttributeName: version
          AttributeType: N
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: novelId
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: LatestVersionIndex
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
  
  # S3 Bucket for assets (images, exports, etc.)
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-assets-${Environment}'
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedHeaders:
              - '*'
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveOldPreviews
            Status: Enabled
            Prefix: panels/previews/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER_IR
          - Id: DeleteTempEdits
            Status: Enabled
            Prefix: edits/temp/
            ExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
  
  # S3 Bucket Policy (optional, for CloudFront access)
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt AssetsBucket.Arn
              - !Sub '${AssetsBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
  
  # Secrets Manager Secret for environment variables
  # NOTE: This secret is managed externally via scripts/sync-secrets.js
  # The secret must exist before deployment or be created during first deploy
  QwenApiKeySecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain  # Keep secret when stack is deleted
    UpdateReplacePolicy: Retain  # Keep secret when resource is replaced
    Properties:
      Name: !Sub '${AWS::StackName}-qwen-api-key'
      Description: Environment variables from .env file (managed by sync-secrets.js)
      SecretString: '{"QWEN_API_KEY":"placeholder","QWEN_ENDPOINT":"https://dashscope-intl.aliyuncs.com/compatible-mode/v1","QWEN_MODEL":"qwen-plus"}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
        - Key: ManagedBy
          Value: sync-secrets-script
   
  # SQS Queue for async novel analysis
  AnalysisQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-analysis-queue'
      VisibilityTimeout: 900  # 15 minutes (Lambda max timeout)
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AnalysisDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
  
  # Dead Letter Queue for failed analysis jobs
  AnalysisDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-analysis-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: qnyproj-api
  
  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration:
        Type: EDGE
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Novel-to-Comics API
          description: AI-powered novel to comic generation platform
          version: v1.0
        paths:
          /items:
            get:
              summary: Get a list of items for the authenticated user
              security:
                - CognitoAuthorizer: []
              responses:
                '200':
                  description: A list of items
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /edge-probe:
            get:
              summary: Edge probe endpoint - returns request headers (public endpoint)
              description: |
                Public endpoint that returns information about the received HTTP request,
                including headers and request context. Useful for debugging CDN and edge routing.
                This endpoint does not require authentication.
              tags:
                - Edge Diagnostics
              responses:
                '200':
                  description: Request header information
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/EdgeProbeResult'
                '500':
                  description: Internal server error
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          error:
                            type: string
                            example: Failed to process request
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /novels:
            post:
              summary: 创建新作品
              tags:
                - Novels
              security:
                - CognitoAuthorizer: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - title
                      properties:
                        title:
                          type: string
                          minLength: 1
                          maxLength: 200
                          description: 作品标题
                          example: 我的奇幻冒险
                        text:
                          type: string
                          description: 小说文本内容 (可选,也可以后续上传到S3)
                          example: 从前有一个勇士...
                        metadata:
                          type: object
                          properties:
                            genre:
                              type: string
                              example: 奇幻
                            tags:
                              type: array
                              items:
                                type: string
                              example:
                                - 冒险
                                - 魔法
              responses:
                '201':
                  description: 作品创建成功
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Novel'
                '400':
                  description: 请求参数错误
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NovelsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /novels/{id}:
            get:
              summary: 获取作品详情
              tags:
                - Novels
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                  description: 作品ID
              responses:
                '200':
                  description: 作品详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Novel'
                '404':
                  description: 作品不存在
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NovelsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
            delete:
              summary: 删除作品
              tags:
                - Novels
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '204':
                  description: 删除成功
                '404':
                  description: 作品不存在
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NovelsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /novels/{id}/analyze:
            post:
              summary: 分析小说文本生成分镜
              description: 使用 Qwen AI 分析文本，提取角色圣经和分镜大纲
              tags:
                - Novels
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        options:
                          type: object
                          properties:
                            panelsPerPage:
                              type: integer
                              default: 6
                              description: 每页面板数
                            style:
                              type: string
                              default: manga
                              description: 漫画风格
              responses:
                '202':
                  description: 分析任务已启动
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          jobId:
                            type: string
                            format: uuid
                          status:
                            type: string
                            enum:
                              - pending
                          message:
                            type: string
                            example: Analysis started. Use GET /jobs/{jobId} to check progress.
                '404':
                  description: 作品不存在
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnalyzeNovelFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /novels/{id}/bible:
            get:
              summary: 获取作品圣经
              description: 返回指定作品最新版本的角色与场景圣经
              tags:
                - Bible
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: version
                  in: query
                  required: false
                  schema:
                    type: integer
                    minimum: 1
                  description: 指定版本号，未提供时返回最新版本
              responses:
                '200':
                  description: 当前圣经信息
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Bible'
                '400':
                  description: 请求参数错误
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
                '404':
                  description: 未找到圣经
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BibleFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /novels/{id}/bible/history:
            get:
              summary: 获取圣经版本历史
              description: 返回指定作品的圣经版本列表
              tags:
                - Bible
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: 圣经版本列表
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/BibleHistoryEntry'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BibleFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /characters/{charId}:
            get:
              summary: 获取角色详情 (含所有配置)
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 角色详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Character'
                '404':
                  description: 角色不存在
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
            put:
              summary: 更新角色基础信息
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        name:
                          type: string
                        role:
                          type: string
                          enum:
                            - protagonist
                            - antagonist
                            - supporting
                            - background
                        baseInfo:
                          type: object
                          properties:
                            gender:
                              type: string
                              enum:
                                - male
                                - female
                                - other
                            age:
                              type: integer
                            personality:
                              type: array
                              items:
                                type: string
              responses:
                '200':
                  description: 更新成功
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Character'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /characters/{charId}/configurations:
            get:
              summary: 列举角色的所有配置
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 配置列表
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/CharacterConfiguration'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
            post:
              summary: 创建新配置
              description: 为角色创建新的配置 (如"战斗模式"、"日常装扮")
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - name
                        - description
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 100
                          example: 战斗模式
                        description:
                          type: string
                          minLength: 1
                          maxLength: 2000
                          example: 艾莉娅穿着银白色铠甲，手持魔法剑
                        tags:
                          type: array
                          items:
                            type: string
                          example:
                            - 战斗
                            - 铠甲
                        appearance:
                          type: object
                          description: 该配置的外貌描述
                        isDefault:
                          type: boolean
                          default: false
              responses:
                '201':
                  description: 配置创建成功
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/CharacterConfiguration'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /characters/{charId}/configurations/{configId}:
            get:
              summary: 获取配置详情
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: configId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 配置详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/CharacterConfiguration'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
            put:
              summary: 更新配置
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: configId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        tags:
                          type: array
                          items:
                            type: string
                        appearance:
                          type: object
              responses:
                '200':
                  description: 更新成功
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/CharacterConfiguration'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
            delete:
              summary: 删除配置
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: configId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '204':
                  description: 删除成功
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /characters/{charId}/configurations/{configId}/refs:
            post:
              summary: 上传配置的参考图
              description: 为指定配置上传多张参考图
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: configId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                required: true
                content:
                  multipart/form-data:
                    schema:
                      type: object
                      properties:
                        images:
                          type: array
                          items:
                            type: string
                            format: binary
                          description: 参考图文件 (最多10张)
              responses:
                '200':
                  description: 上传成功
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          uploaded:
                            type: array
                            items:
                              type: object
                              properties:
                                s3Key:
                                  type: string
                                url:
                                  type: string
                                  format: uri
                                caption:
                                  type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CharactersFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /characters/{charId}/configurations/{configId}/portraits:
            post:
              summary: 生成配置的标准像
              description: 为指定配置生成多视角标准像 (使用 Imagen 3)
              tags:
                - Characters
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: charId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: configId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '202':
                  description: 生成任务已启动
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          jobId:
                            type: string
                            format: uuid
                          message:
                            type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePortraitFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /storyboards/{id}:
            get:
              summary: 获取分镜详情
              tags:
                - Storyboards
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 分镜详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Storyboard'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoryboardsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /storyboards/{id}/generate:
            post:
              summary: 批量生成面板图像
              description: 使用 Imagen 3 批量生成所有面板的图像
              tags:
                - Storyboards
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
                - name: mode
                  in: query
                  required: false
                  schema:
                    type: string
                    enum:
                      - preview
                      - hd
                    default: preview
                  description: '生成模式 (preview: 512x288, hd: 1920x1080)'
              responses:
                '202':
                  description: 生成任务已启动
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          jobId:
                            type: string
                            format: uuid
                          status:
                            type: string
                          totalPanels:
                            type: integer
                          message:
                            type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePanelsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /panels/{panelId}:
            get:
              summary: 获取面板详情
              tags:
                - Panels
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: panelId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 面板详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Panel'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PanelsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /panels/{panelId}/edit:
            post:
              summary: 编辑面板
              description: 使用 Imagen 3 编辑 API (inpaint/outpaint/bg_swap)
              tags:
                - Panels
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: panelId
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - editMode
                        - instruction
                      properties:
                        editMode:
                          type: string
                          enum:
                            - inpaint
                            - outpaint
                            - bg_swap
                        instruction:
                          type: string
                          description: 编辑指令
                          example: 把角色的表情改为微笑
                        mask:
                          type: string
                          description: 遮罩图 (Base64 或 S3 URL)
              responses:
                '202':
                  description: 编辑任务已启动
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          jobId:
                            type: string
                            format: uuid
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EditPanelFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /change-requests:
            post:
              summary: 提交修改请求
              description: 用户用自然语言描述修改诉求，系统解析为 CR-DSL 并执行
              tags:
                - Change Requests
              security:
                - CognitoAuthorizer: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - novelId
                        - naturalLanguage
                      properties:
                        novelId:
                          type: string
                          format: uuid
                        naturalLanguage:
                          type: string
                          minLength: 1
                          maxLength: 1000
                          example: 把第 3 页第 2 个面板中艾莉娅的表情改为微笑
              responses:
                '202':
                  description: CR 已提交并正在处理
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          crId:
                            type: string
                            format: uuid
                          jobId:
                            type: string
                            format: uuid
                          dsl:
                            $ref: '#/components/schemas/CRDSL'
                          message:
                            type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangeRequestFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /jobs/{id}:
            get:
              summary: 查询任务进度
              tags:
                - Jobs
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 任务详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Job'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JobsFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /exports:
            post:
              summary: 创建导出任务
              description: 导出漫画为 PDF/Webtoon/资源包
              tags:
                - Exports
              security:
                - CognitoAuthorizer: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                        - novelId
                        - format
                      properties:
                        novelId:
                          type: string
                          format: uuid
                        format:
                          type: string
                          enum:
                            - pdf
                            - webtoon
                            - resources
                          description: 导出格式
              responses:
                '202':
                  description: 导出任务已启动
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          exportId:
                            type: string
                            format: uuid
                          jobId:
                            type: string
                            format: uuid
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExportFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
          /exports/{id}:
            get:
              summary: 获取导出结果
              description: 返回导出文件的预签名 URL
              tags:
                - Exports
              security:
                - CognitoAuthorizer: []
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                    format: uuid
              responses:
                '200':
                  description: 导出详情
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Export'
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExportFunction.Arn}/invocations
                payloadFormatVersion: '2.0'
        components:
          schemas:
            Error:
              type: object
              required:
                - error
              properties:
                error:
                  type: string
                  description: 错误消息
                  example: Resource not found
                details:
                  type: object
                  description: 详细错误信息
                  additionalProperties: true
            Item:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: My Awesome Item
            EdgeProbeResult:
              type: object
              required:
                - receivedHost
                - requestContextDomain
                - method
                - path
              properties:
                receivedHost:
                  type: string
                  description: Host header received by the server
                  example: api.vfs-tracker.app
                requestContextDomain:
                  type: string
                  description: Domain from request context
                  example: api.vfs-tracker.app
                method:
                  type: string
                  description: HTTP method
                  example: GET
                path:
                  type: string
                  description: Request path
                  example: /dev/edge-probe
                headers:
                  type: object
                  description: All received HTTP headers
                  additionalProperties:
                    type: string
                  example:
                    user-agent: Mozilla/5.0
                    accept: application/json
                timestamp:
                  type: string
                  format: date-time
                  description: Request timestamp
                  example: 2025-10-16T08:30:00.000Z
            Novel:
              type: object
              required:
                - id
                - title
                - status
                - userId
                - createdAt
              properties:
                id:
                  type: string
                  format: uuid
                  description: 作品唯一标识
                title:
                  type: string
                  description: 作品标题
                  example: 我的奇幻冒险
                originalText:
                  type: string
                  description: 原文内容
                originalTextS3:
                  type: string
                  description: 原文 S3 Key
                status:
                  type: string
                  enum:
                    - created
                    - analyzing
                    - analyzed
                    - generating
                    - completed
                    - error
                  description: 作品状态
                storyboardId:
                  type: string
                  format: uuid
                  description: 关联的分镜ID
                userId:
                  type: string
                  description: Cognito 用户 ID
                metadata:
                  type: object
                  properties:
                    genre:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            Character:
              type: object
              required:
                - id
                - name
                - novelId
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                  description: 角色名称
                  example: 艾莉娅
                role:
                  type: string
                  enum:
                    - protagonist
                    - antagonist
                    - supporting
                    - background
                novelId:
                  type: string
                  format: uuid
                baseInfo:
                  type: object
                  properties:
                    gender:
                      type: string
                      enum:
                        - male
                        - female
                        - other
                    age:
                      type: integer
                    personality:
                      type: array
                      items:
                        type: string
                configurations:
                  type: array
                  items:
                    $ref: '#/components/schemas/CharacterConfiguration'
                  description: 角色的所有配置
                defaultConfigId:
                  type: string
                  format: uuid
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            CharacterConfiguration:
              type: object
              required:
                - id
                - charId
                - name
              properties:
                id:
                  type: string
                  format: uuid
                charId:
                  type: string
                  format: uuid
                name:
                  type: string
                  description: 配置名称
                  example: 战斗模式
                description:
                  type: string
                  description: 配置的详细描述
                  example: 艾莉娅穿着银白色铠甲，手持魔法剑
                tags:
                  type: array
                  items:
                    type: string
                  example:
                    - 战斗
                    - 铠甲
                appearance:
                  type: object
                  description: 外貌描述
                  properties:
                    hairStyle:
                      type: string
                    hairColor:
                      type: string
                    eyeColor:
                      type: string
                    clothing:
                      type: array
                      items:
                        type: string
                    accessories:
                      type: array
                      items:
                        type: string
                referenceImages:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                      caption:
                        type: string
                      uploadedAt:
                        type: string
                        format: date-time
                generatedPortraits:
                  type: array
                  items:
                    type: object
                    properties:
                      view:
                        type: string
                        enum:
                          - front
                          - side
                          - three-quarter
                          - 45-degree
                          - full-body
                      url:
                        type: string
                        format: uri
                      generatedAt:
                        type: string
                        format: date-time
                isDefault:
                  type: boolean
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            Storyboard:
              type: object
              required:
                - id
                - novelId
                - version
              properties:
                id:
                  type: string
                  format: uuid
                novelId:
                  type: string
                  format: uuid
                version:
                  type: integer
                  minimum: 1
                totalPages:
                  type: integer
                panelCount:
                  type: integer
                panels:
                  type: array
                  items:
                    $ref: '#/components/schemas/Panel'
                createdAt:
                  type: string
                  format: date-time
            Panel:
              type: object
              required:
                - id
                - page
                - index
              properties:
                id:
                  type: string
                  format: uuid
                storyboardId:
                  type: string
                  format: uuid
                page:
                  type: integer
                  minimum: 1
                  description: 页码
                index:
                  type: integer
                  minimum: 0
                  description: 页内序号
                content:
                  type: object
                  properties:
                    scene:
                      type: string
                      description: 场景描述
                    shotType:
                      type: string
                      enum:
                        - close-up
                        - medium
                        - wide
                        - extreme-wide
                    characters:
                      type: array
                      items:
                        type: object
                        properties:
                          charId:
                            type: string
                            format: uuid
                          configId:
                            type: string
                            format: uuid
                            description: 使用的配置ID
                          name:
                            type: string
                          pose:
                            type: string
                          expression:
                            type: string
                            enum:
                              - neutral
                              - happy
                              - sad
                              - angry
                              - surprised
                              - determined
                              - fearful
                    dialogue:
                      type: array
                      items:
                        type: object
                        properties:
                          speaker:
                            type: string
                          text:
                            type: string
                          bubbleType:
                            type: string
                            enum:
                              - speech
                              - thought
                              - narration
                              - scream
                visualPrompt:
                  type: string
                  description: Imagen prompt
                images:
                  type: object
                  properties:
                    preview:
                      type: string
                      format: uri
                    hd:
                      type: string
                      format: uri
            Job:
              type: object
              required:
                - id
                - type
                - status
              properties:
                id:
                  type: string
                  format: uuid
                type:
                  type: string
                  enum:
                    - analyze
                    - generate_preview
                    - generate_hd
                    - edit
                    - export
                status:
                  type: string
                  enum:
                    - pending
                    - in_progress
                    - completed
                    - failed
                progress:
                  type: object
                  properties:
                    total:
                      type: integer
                    completed:
                      type: integer
                    failed:
                      type: integer
                    percentage:
                      type: number
                      format: float
                result:
                  type: object
                  description: 任务结果 (内容依赖于 type)
                  additionalProperties: true
                error:
                  type: string
                  description: 错误信息
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            CRDSL:
              type: object
              required:
                - scope
                - type
                - ops
              description: Change Request Domain-Specific Language
              properties:
                scope:
                  type: string
                  enum:
                    - global
                    - character
                    - panel
                    - page
                targetId:
                  type: string
                type:
                  type: string
                  enum:
                    - art
                    - dialogue
                    - layout
                    - style
                ops:
                  type: array
                  items:
                    type: object
                    required:
                      - action
                    properties:
                      action:
                        type: string
                        enum:
                          - inpaint
                          - outpaint
                          - bg_swap
                          - repose
                          - regen_panel
                          - rewrite_dialogue
                          - reorder
                      params:
                        type: object
                        additionalProperties: true
            Export:
              type: object
              required:
                - id
                - novelId
                - format
                - status
              properties:
                id:
                  type: string
                  format: uuid
                novelId:
                  type: string
                  format: uuid
                format:
                  type: string
                  enum:
                    - pdf
                    - webtoon
                    - resources
                status:
                  type: string
                  enum:
                    - pending
                    - processing
                    - completed
                    - failed
                fileUrl:
                  type: string
                  format: uri
                  description: 预签名 URL
                fileSize:
                  type: integer
                createdAt:
                  type: string
                  format: date-time
            Bible:
              type: object
              required:
                - novelId
                - version
                - characters
                - scenes
                - metadata
              properties:
                novelId:
                  type: string
                version:
                  type: integer
                  minimum: 1
                characters:
                  type: array
                  items:
                    $ref: '#/components/schemas/BibleCharacter'
                scenes:
                  type: array
                  items:
                    $ref: '#/components/schemas/BibleScene'
                metadata:
                  $ref: '#/components/schemas/BibleMetadata'
            BibleCharacter:
              type: object
              required:
                - name
                - role
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum:
                    - protagonist
                    - antagonist
                    - supporting
                    - background
                appearance:
                  $ref: '#/components/schemas/BibleCharacterAppearance'
                personality:
                  type: array
                  items:
                    type: string
                firstAppearance:
                  $ref: '#/components/schemas/BibleFirstAppearance'
                referenceImages:
                  type: array
                  items:
                    type: string
                    format: uri
            BibleCharacterAppearance:
              type: object
              properties:
                gender:
                  type: string
                age:
                  type: integer
                  minimum: 0
                hairColor:
                  type: string
                hairStyle:
                  type: string
                eyeColor:
                  type: string
                height:
                  type: string
                build:
                  type: string
                clothing:
                  type: array
                  items:
                    type: string
                distinctiveFeatures:
                  type: array
                  items:
                    type: string
            BibleFirstAppearance:
              type: object
              required:
                - chapter
              properties:
                chapter:
                  type: integer
                  minimum: 1
                page:
                  type: integer
                  minimum: 1
                panelIndex:
                  type: integer
                  minimum: 0
            BibleScene:
              type: object
              required:
                - id
                - name
                - type
                - description
              properties:
                id:
                  type: string
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - indoor
                    - outdoor
                    - indoor-outdoor
                    - natural
                    - urban
                    - rural
                    - fantasy
                    - abstract
                description:
                  type: string
                visualCharacteristics:
                  type: object
                  properties:
                    architecture:
                      type: string
                    keyLandmarks:
                      type: array
                      items:
                        type: string
                    colorScheme:
                      type: string
                    lighting:
                      type: object
                      properties:
                        naturalLight:
                          type: string
                        artificialLight:
                          type: string
                        lightSources:
                          type: array
                          items:
                            type: string
                    atmosphere:
                      type: string
                    soundscape:
                      type: array
                      items:
                        type: string
                    textures:
                      type: array
                      items:
                        type: string
                spatialLayout:
                  type: object
                  properties:
                    size:
                      type: string
                    layout:
                      type: string
                    keyAreas:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          position:
                            type: string
                timeVariations:
                  type: array
                  items:
                    type: object
                    properties:
                      timeOfDay:
                        type: string
                      description:
                        type: string
                weatherVariations:
                  type: array
                  items:
                    type: object
                    properties:
                      weather:
                        type: string
                      description:
                        type: string
                narrativeRole:
                  type: string
                firstAppearance:
                  $ref: '#/components/schemas/BibleFirstAppearance'
                referenceImages:
                  type: array
                  items:
                    type: string
                    format: uri
            BibleMetadata:
              type: object
              required:
                - createdAt
                - updatedAt
                - lastChapter
                - totalCharacters
                - totalScenes
              properties:
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
                lastChapter:
                  type: integer
                  minimum: 0
                totalCharacters:
                  type: integer
                  minimum: 0
                totalScenes:
                  type: integer
                  minimum: 0
                storageLocation:
                  type: string
            BibleHistoryEntry:
              type: object
              required:
                - version
                - updatedAt
              properties:
                version:
                  type: integer
                  minimum: 1
                updatedAt:
                  type: string
                  format: date-time
                lastChapter:
                  type: integer
                  minimum: 0
                totalCharacters:
                  type: integer
                  minimum: 0
                totalScenes:
                  type: integer
                  minimum: 0
                storageLocation:
                  type: string
          securitySchemes:
            CognitoAuthorizer:
              type: openIdConnect
              openIdConnectUrl:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${MyCognitoUserPoolId}
      CacheClusterEnabled: false
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        ItemsApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /items
            Method: GET
        EdgeProbeApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /edge-probe
            Method: GET
  NovelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/novels/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        NovelsFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels
            Method: POST
        NovelsFunctionEvent2:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels/{id}
            Method: GET
        NovelsFunctionEvent3:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels/{id}
            Method: DELETE
  AnalyzeNovelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/analyze-novel/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Timeout: 30  # Only needs to create job and send SQS message
      MemorySize: 512  # Lighter memory requirement
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3ReadPolicy:
            BucketName: !Ref AssetsBucket
        - Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt AnalysisQueue.Arn
      Events:
        AnalyzeNovelFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels/{id}/analyze
            Method: POST
  
  # Worker Function for async analysis (triggered by SQS)
  AnalyzeWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/analyze-worker/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Timeout: 900  # 15 minutes for long-running analysis
      MemorySize: 2048  # More memory for Qwen API processing
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
          QWEN_SECRET_ARN: !Ref QwenApiKeySecret
          BIBLES_TABLE_NAME: !Ref BiblesTable
          BIBLES_BUCKET: !Ref AssetsBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BiblesTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref QwenApiKeySecret
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AnalysisQueue.Arn
            BatchSize: 1  # Process one analysis at a time
            MaximumBatchingWindowInSeconds: 0  # No batching delay

  BibleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/bible/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          BIBLES_TABLE_NAME: !Ref BiblesTable
          BIBLES_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BiblesTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        BibleGetLatest:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels/{id}/bible
            Method: GET
        BibleGetHistory:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /novels/{id}/bible/history
            Method: GET
  
  CharactersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/characters/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        CharactersFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}
            Method: GET
        CharactersFunctionEvent2:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}
            Method: PUT
        CharactersFunctionEvent3:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations
            Method: GET
        CharactersFunctionEvent4:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations
            Method: POST
        CharactersFunctionEvent5:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations/{configId}
            Method: GET
        CharactersFunctionEvent6:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations/{configId}
            Method: PUT
        CharactersFunctionEvent7:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations/{configId}
            Method: DELETE
        CharactersFunctionEvent8:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations/{configId}/refs
            Method: POST
  GeneratePortraitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/generate-portrait/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        GeneratePortraitFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /characters/{charId}/configurations/{configId}/portraits
            Method: POST
  StoryboardsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/storyboards/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        StoryboardsFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /storyboards/{id}
            Method: GET
  GeneratePanelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/generate-panels/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
          QWEN_SECRET_ARN: !Ref QwenApiKeySecret
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref QwenApiKeySecret
      Events:
        GeneratePanelsFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /storyboards/{id}/generate
            Method: POST
  PanelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/panels/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        PanelsFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /panels/{panelId}
            Method: GET
  EditPanelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/edit-panel/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        EditPanelFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /panels/{panelId}/edit
            Method: POST
  ChangeRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/change-request/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        ChangeRequestFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /change-requests
            Method: POST
  JobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/jobs/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        JobsFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /jobs/{id}
            Method: GET
  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: functions/export/index.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref ComicDataTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ComicDataTable
        - S3CrudPolicy:
            BucketName: !Ref AssetsBucket
      Events:
        ExportFunctionEvent1:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /exports
            Method: POST
        ExportFunctionEvent2:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApiGateway
            Path: /exports/{id}
            Method: GET
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for Dev stage
    Value:
      Fn::Sub: https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  ApiId:
    Description: API Gateway ID
    Value:
      Ref: MyApiGateway
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiId
  ComicDataTableName:
    Description: DynamoDB table name for application data
    Value:
      Ref: ComicDataTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableName
  ComicDataTableArn:
    Description: DynamoDB table ARN
    Value:
      Fn::GetAtt: [ComicDataTable, Arn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableArn
  ComicDataTableStreamArn:
    Description: DynamoDB table stream ARN (for PanelWorker)
    Value:
      Fn::GetAtt: [ComicDataTable, StreamArn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableStreamArn
  AssetsBucketName:
    Description: S3 bucket name for assets
    Value:
      Ref: AssetsBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BucketName
  AssetsBucketArn:
    Description: S3 bucket ARN
    Value:
      Fn::GetAtt: [AssetsBucket, Arn]
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BucketArn
